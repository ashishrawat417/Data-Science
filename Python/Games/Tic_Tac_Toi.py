# -*- coding: utf-8 -*-
"""Advance_python_assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18hcxN4EQTQPPUay-WiTkWM9nBThe3Udh

### Author: Ashish Rawat
### Data: Sep 21, 2020
### Description: Build a Naughts and Crosses game
"""

class InvalidInputError(Exception):
  pass

# Board class to store all board activities
class Board:
  def __init__(self, board_size):
    # Store board size
    self.board_size = board_size
    self.x = int(board_size.split("x")[0])
    self.y = int(board_size.split("x")[1])
    
    self.board = []

    for row in range(self.x):
      for col in range(self.y):
        self.board.append("*")

    self.children = []
    #to count the number of added players
    self.counter = 0
    
  def display_board(self):
    ## Display board and all its element in board
    print ("--------------------------")
    for row in range(self.x):
        for col in range(self.y):
          index = col + (row * self.x)
          print(self.board[index], end="\t")
        print("\n")

  
  def check_board(self, key):
    ## Check If place is already
    if self.board[key - 1] != "*":
      print(str(key), "position has been taken by Player " + self.board[key - 1])
      return False
    return True
  
  def update_board(self, position, symbol):
    ## Update board with player and position
    self.board[position - 1] = symbol
    self.counter = self.counter + 1
    return True

  def checkWon(self, symbol):
    # Check if game is won or not
    x = self.x
    y = self.y
    win = False

    # To compare horizontal win
    for i in range(x):
      for j in range(y):
        index = j + (i * x)
        if self.board[index]  == symbol:
          win = True
        else:
          win = False
          break
      
      if win == True:
        return True

    # To compare vertical cells
    for i in range(x):
      for j in range(y):
        index = i + (j * y)
        if self.board[index]  == symbol:
          win = True
        else:
          win = False
          break
      
      if win == True:
        return True
    
    # left-right diagonal cells compare
    index = 0
    for i in range(x):
        if i == 0:
          index = 0
        else:
          index = index + x + 1

        if self.board[index]  == symbol:
          win = True
        else:
          win = False
          break
      
    if win == True:
      return True
      
    # right-left diagonal cells compare
    index = 0
    for i in range(x):
        index = index + x - 1
        if self.board[index]  == symbol:
          win = True
        else:
          win = False
          break
      
    if win == True:
      return True
    
    return False

class Player:
  def __init__(self, symbol):
    self.symbol = symbol
    self.win = False
    self.moves = []
  
  def update_board(self, position, board):
    self.moves.append(position)
    board.update_board(position, self.symbol)
    
  
  def __str__(self):
    return 'a {self.color} car'.format(self=self)

# GamePlay to store game status about player
class GamePlay:
  def __init__(self, p1, p2):
    self.p1 = p1
    self.p2 = p2
    self.play = True
    self.win = False
  
  def turn_player(self, player):
    # Change player turn
    return self.p1 if player is None or player == self.p2 else self.p2

  def game_loop(self, board):
    # Game loop until it is finished ot someone win
    player = self.p1

    while self.play:
        try:
          # at which position you would like to add the player 
          position = int(input("Enter position for player " + player.symbol + ": "))
          if position < 1 or position > board.x * board.y:
            raise InvalidInputError(Exception)
          
          ## add X player into the board 
          if board.check_board(position):
            board.children.append(board)
            player.update_board(position, board)
            
            #to count the number of added players
            if board.checkWon(player.symbol):
              print("-----------------------------")
              print("Player", player.symbol, "win")
              print("-----------------------------")
              
              board.display_board()
              self.win = True
              print("Game Over")
              return True
          
            if board.counter >= board.x * board.y:		
              self.play = False
              print("Game Over but no winner")	
              return True
          else:
            continue
          
          player = self.turn_player(player)
          board.display_board()
        except InvalidInputError as e:
          print("\r\nPlease enter box element inside board!")

#libraries to import
import re
if __name__ == "__main__":
  print("Welcome to Game - Tic-Tac-Toe")
  while (True):
    try:
      choice = input("Please Enter begin(b) to Play or quit (q) to exit:")
      if re.search('^(q|e).*', choice, flags=re.IGNORECASE) is not None:
        print("\r\nGame has quit, Bye!")
        break
      elif re.search('^(b|s).*', choice, flags=re.IGNORECASE) is not None:
        print("\r\nThe game has begun")
        board_size = input("Please enter the size of board: 3x3, 6x6 etc.. :")

        if re.search("^[2-9]x[2-9]$", board_size, flags=re.IGNORECASE) is not None:
          board = Board(board_size)
          board.display_board()
          p1 = Player('X')
          p2 = Player('O')
          play = GamePlay(p1, p2)      
          # print the grid
          # main loop for 9 times
          if play.game_loop(board):
            break
        else:
          raise InvalidInputError(Exception)
      else:
        raise InvalidInputError(Exception)
    except InvalidInputError as e:
      print("\r\nPlease enter the correct Choice!")





